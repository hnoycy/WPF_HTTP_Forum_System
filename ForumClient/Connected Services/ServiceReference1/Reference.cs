//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ForumClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="postInfo", Namespace="http://schemas.datacontract.org/2004/07/GobangGameWcfService")]
    [System.SerializableAttribute()]
    public partial class postInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> postTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> posterIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string titleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string content {
            get {
                return this.contentField;
            }
            set {
                if ((object.ReferenceEquals(this.contentField, value) != true)) {
                    this.contentField = value;
                    this.RaisePropertyChanged("content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> postTime {
            get {
                return this.postTimeField;
            }
            set {
                if ((this.postTimeField.Equals(value) != true)) {
                    this.postTimeField = value;
                    this.RaisePropertyChanged("postTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> posterID {
            get {
                return this.posterIDField;
            }
            set {
                if ((this.posterIDField.Equals(value) != true)) {
                    this.posterIDField = value;
                    this.RaisePropertyChanged("posterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="WcfGobangGameExample", ConfigurationName="ServiceReference1.IGobangService", CallbackContract=typeof(ForumClient.ServiceReference1.IGobangServiceCallback))]
    public interface IGobangService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/Login")]
        void Login(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/Login")]
        System.Threading.Tasks.Task LoginAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/Logout")]
        void Logout(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/Logout")]
        System.Threading.Tasks.Task LogoutAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/GetAllPosts")]
        void GetAllPosts(int userID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/GetAllPosts")]
        System.Threading.Tasks.Task GetAllPostsAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/CreateNewPost")]
        void CreateNewPost(int posterID, string title, string content);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/CreateNewPost")]
        System.Threading.Tasks.Task CreateNewPostAsync(int posterID, string title, string content);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/CreateNewComment")]
        void CreateNewComment();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/CreateNewComment")]
        System.Threading.Tasks.Task CreateNewCommentAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGobangServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/LoginCallBack")]
        void LoginCallBack(bool status, string message, int userID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/GetAllPostsCallBack")]
        void GetAllPostsCallBack(ForumClient.ServiceReference1.postInfo[] postsList);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfGobangGameExample/IGobangService/RefreshPostList")]
        void RefreshPostList();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGobangServiceChannel : ForumClient.ServiceReference1.IGobangService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GobangServiceClient : System.ServiceModel.DuplexClientBase<ForumClient.ServiceReference1.IGobangService>, ForumClient.ServiceReference1.IGobangService {
        
        public GobangServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GobangServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GobangServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GobangServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GobangServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login(string userName, string password) {
            base.Channel.Login(userName, password);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string userName, string password) {
            return base.Channel.LoginAsync(userName, password);
        }
        
        public void Logout(string userName) {
            base.Channel.Logout(userName);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string userName) {
            return base.Channel.LogoutAsync(userName);
        }
        
        public void GetAllPosts(int userID) {
            base.Channel.GetAllPosts(userID);
        }
        
        public System.Threading.Tasks.Task GetAllPostsAsync(int userID) {
            return base.Channel.GetAllPostsAsync(userID);
        }
        
        public void CreateNewPost(int posterID, string title, string content) {
            base.Channel.CreateNewPost(posterID, title, content);
        }
        
        public System.Threading.Tasks.Task CreateNewPostAsync(int posterID, string title, string content) {
            return base.Channel.CreateNewPostAsync(posterID, title, content);
        }
        
        public void CreateNewComment() {
            base.Channel.CreateNewComment();
        }
        
        public System.Threading.Tasks.Task CreateNewCommentAsync() {
            return base.Channel.CreateNewCommentAsync();
        }
    }
}
